# region #### setuptools settings ##########

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "aiosmtpd"
requires-python = ">=3.7"
dynamic = ["version"]
description = "aiosmtpd - asyncio based SMTP server"
readme = "DESCRIPTION.rst"
urls."Home Page" = "https://aiosmtpd.readthedocs.io/"
urls."Bug Tracker" = "https://github.com/aio-libs/aiosmtpd/issues"
urls."Documentation" = "https://aiosmtpd.readthedocs.io/"
urls."Source Code" = "https://github.com/aio-libs/aiosmtpd"
maintainers = [
    { name = "The aiosmtpd Developers", email = "aiosmtpd@googlegroups.com"}
]
keywords = [ "email", "smtpd", "smtp", "async"]
license.file = "LICENSE"
classifiers = [
    "License :: OSI Approved",
    "License :: OSI Approved :: Apache Software License",
    "Intended Audience :: Developers",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: BSD :: FreeBSD",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Communications :: Email :: Mail Transport Agents",
    "Framework :: AsyncIO",
]
dependencies = [
    "atpublic",
    "attrs",
    "typing-extensions ; python_version < '3.8'",
]

[project.scripts]
aiosmtpd = "aiosmtpd.main:main"

[tool.setuptools]
"zip-safe" = false

[tool.setuptools.dynamic]
version = { attr = "aiosmtpd.__version__" }

# endregion

[tool.pytest.ini_options]
addopts = """--strict-markers -rfEX"""
markers = [
    "client_data",
    "controller_data",
    "handler_data",
]

# region #### coverage.py settings ###########################################

[tool.coverage.run]
branch = true
parallel = true
omit = [
    "aiosmtpd/docs/*",
    "aiosmtpd/qa/*",
    "aiosmtpd/testing/*",
    "aiosmtpd/tests/*",
    ".tox/*",
    "*/helpers/pycharm/*",
    "*/hostedtoolcache/*",  # GitHub Actions site-packages location
]
plugins = [
    "coverage_conditional_plugin"
]

[tool.coverage.paths]
source = [
    "aiosmtpd",
]

[tool.coverage.coverage_conditional_plugin.rules]
# Here we specify our pragma rules:
py-ge-38 = "sys_version_info >= (3, 8)"
py-lt-38 = "sys_version_info < (3, 8)"
py-gt-36 = "sys_version_info > (3, 6)"
has-mypy = "is_installed('mypy')"
has-pwd = "is_installed('pwd')"
on-win32 = "sys_platform == 'win32'"
on-wsl = "'Microsoft' in platform_release"
    # On Windows, platform.release() returns the Windows version (e.g., "7" or "10")
    # On Linux (incl. WSL), platform.release() returns the kernel version.
    # As of 2021-02-07, only WSL has a kernel with "Microsoft" in the version.
on-not-win32 = "sys_platform != 'win32'"
on-cygwin = "sys_platform == 'cygwin'"
no-unixsock = "sys_platform in {'win32', 'cygwin'}"

[tool.coverage.report]
exclude_lines = [
    "pragma: nocover",
    "pragma: no cover",
    "@abstract",
    'class \S+\(Protocol\):'
]
fail_under = 100
show_missing = true

[tool.coverage.html]
directory = "htmlcov/${TOX_ENV_NAME}"
title = "aiosmtpd coverage for ${TOX_ENV_NAME}"

[tool.coverage.xml]
output = "_dump/coverage-${INTERP}.xml"

# endregion

[tool.check-manifest]
ignore = [
    "examples/**",
]

[tool.isort]
profile = "black"
multi_line_output = 3
known_local_folder = [
    "aiosmtpd"
]
combine_as_imports = true


[tool.flake8]
max-line-length = 88
select = ["E", "F", "W", "C90", "C4", "MOD", "JS", "PIE", "PT", "SIM", "ECE", "C801", "DUO", "TAE", "ANN", "YTT", "N400"]
ignore = [
    # black conflicts with E123 & E133
    "E123",
    "E133",
    # W503 conflicts with PEP8...
    "W503",
    # W293 is a bit too noisy. Many files have been edited using editors that do not remove spaces from blank lines.
    "W293",
    # Sometimes spaces around colons improve readability
    "E203",
    # Sometimes we prefer the func()-based creation, not literal, for readability
    "C408",
    # Sometimes we need to catch Exception broadly
    "PIE786",
    # We don't really care about pytest.fixture vs pytest.fixture()
    "PT001",
    # Good idea, but too many changes. Remove this in the future, and create separate PR
    "PT004",
    # Sometimes exception needs to be explicitly raised in special circumstances, needing additional lines of code
    "PT012",
    # I still can't grok the need to annotate "self" or "cls" ...
    "ANN101",
    "ANN102",
    # I don't think forcing annotation for *args and **kwargs is a wise idea...
    "ANN002",
    "ANN003",
    # We have too many "if..elif..else: raise" structures that does not convert well to "error-first" design
    "SIM106",
    # We have too many 'Any' type annotations.
    "ANN401",
    # Classes for some reason aren't always just replaceable by modules.
    "PIE798",
    # It is cleaner sometimes to assign and return, especially when using 'await' expressions.
    "PIE781",
    # Use f'strings instead of % formatters, the performance impact isn't too bad and f'strings are awesome!
    "PIE803",
    # It is more readable to instantiate and add items on-by-one instead of all at once.
    "PIE799",
    # Explicit is better than implicit, range(0, val) is more explicit than range(val).
    "PIE808",
]
per-file-ignores = [
    "aiosmtpd/tests/test_*:ANN001",
    "aiosmtpd/tests/test_proxyprotocol.py:DUO102",
    "aiosmtpd/docs/_exts/autoprogramm.py:C801",
]
# flake8-coding
no-accept-encodings = true
# flake8-copyright
copyright-check = true
# The number below was determined empirically by bisecting from 100 until no copyright-unnecessary files appear
copyright-min-file-size = 44
copyright-author = "The aiosmtpd Developers"
# flake8-annotations-complexity
max-annotations-complexity = 4
# flake8-annotations-coverage
min-coverage-percents = 12
# flake8-annotations
mypy-init-return = true
suppress-none-returning = true
suppress-dummy-args = true
allow-untyped-defs = true
